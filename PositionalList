class Position(object):
    def __init__(self, container, node):
        self._container = container
        self._node = node
    
    def element(self):
        return self._node._element
    
    def __eq__(self, other):
        #using is to test whether they're pointing to the same object
        return type(other) is type(self) and other._node is self._node 
    
    def __ne__(self,other):
        return not(self == other)


class PositionalList(_DoublyLinkedBase):
    def __init__(self):
        super(PositionalList,self).__init__()
    
    def _validate(self,p):
        if not isinstance(p, Position):
            raise TypeError('Not a Position Type')
        if p._container is not self:
            raise ValueError('p does not belong to this container')
        if p._node is None:
            raise ValueError('p is no longer valid')
        return p._node
    
    #wrap up 
    def _make_position(self,node):
        if node is self._header or node is self._trailer:
            return None
        else:
            return Position(self, node)
    
    #output the wrapped up node
    def first(self):
        return self._make_position(self._header._next)
    
    def last(self):
        return self._make_position(self._trailer._prev)
    
    def before(self,p):
        node = self._validate(p)
        return self._make_position(node._prev)
    
    def after(self,p):
        node = self._validate(p)
        return self._make_position(node._next)
    
    def __iter__(self):
        cursor = self.first()
        while cursor is not None:
            yield cursor.element()
            cursor = self.after(cursor)
            
    def _insert_between(self,e,pred,succ):
        node = super(PositionalList,self)._insert_between(e,pred,succ)
        return self._make_position(node)
    
    def add_first(self,e):
        return self._insert_between(e,self._header,self._header._next)
    
    def add_last(self,e):
        return self._insert_between(e,self._trailer._prev, self._trailer)
    
    def add_before(self,p,e):
        original = self._validate(p)
        return self._insert_between(original._prev, original)
    
    def add_after(self,p,e):
        original= self._validate(p)
        return self._insert_between(original, original._next)
    
    def delete(self,p):
        original = self._validate(p)
        return self._delete_node(original)
    
    def replace(self,p):
        original = self._validate(p)
        old_value = original._element
        original._element = e
        return old_value
    
    
