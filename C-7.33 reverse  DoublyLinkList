class _Node:
    __slot__ = '_element','_prev','_next'
    def __init__(self,element,prev, after):
        self._element = element
        self._prev = prev
        self._next = after
        
class _DoublyLinkedBase(object):
    def __init__(self):
        self._header = _Node(None,None,None)
        self._trailer = _Node(None,self._header,None)
        self._header._next = self._trailer
        self._size = 0
        
    def __len__(self):
        return self._size
    
    def is_empty(self):
        return self._size == 0
    
    def _insert_between(self,e,pred,succ):
        new = _Node(e,pred,succ)
        pred._next = new
        succ._prev = new
        self._size += 1
        return new
    
    def _delete_node(self,node):
        node._prev._next = node._next
        node._next._prev = node._prev
        self._size -= 1
        answer = node._element
        #destroy the node
        node._prev = node._next = node._element = None
        return answer
    
    
    def reverse(self):
        prev = self._header
        current = self._header._next
        while current != None:
            next_current = current._next
            prev._prev = current
            current._next = prev
            prev, current = current, next_current 
        self._header._next = None
        self._trailer._prev = None
        self._header, self._trailer = self._trailer, self._header
        
class LinkedDeque(_DoublyLinkedBase):
    def __init__(self):
        super(LinkedDeque,self).__init__()
        
    def first(self):
        return self._header._next._element
    
    def last(self):
        return self._trailer._prev._element
    
    def insert_first(self,e):
        self._insert_between(e,self._header, self._header._next)
    
    def insert_last(self,e):
        self._insert_between(e,self._trailer,self._trailer._prev)
    
    def delete_first(self):
        self._delete_node(self._header._next)
        
    def delete_last(self):
        self._delete_node(self._trailer._prev)
    
    def __repr__(self):
        dequeList = []
        temp = self._header._next
        for i in range(self._size):
            dequeList.append(temp._element)
            temp = temp._next
        return str(dequeList)
        
test = LinkedDeque()
for i in range(10):
    test.insert_first(i)
test.delete_last()
test.delete_first()
print test
test.reverse()
print test   
