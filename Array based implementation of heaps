#Array based implementation of heaps
class _Item:
    __slots__ = '_key','_value'
    
    def __init__(self,key,value):
        self._key = key
        self._value = value
    
    def __lt__(self,other):
        return self._key < other._key

class HeapPriorityQueue:
    def __init__(self):
        self._data =[]
    
    def _parent(self,j):
        return int((j-1) // 2)
    
    def _left(self,j):
        return 2*j + 1
    
    def _right(self,j):
        return 2*j + 2
    
    def _has_left(self,j):
        return self._left(j) < len(self._data)
    
    def _has_right(self,j):
        return self._right(j) < len(self._data)
    
    def _swap(self,i,j):
        self._data[i], self._data[j] = self._data[j], self._data[i]
        
    def _upheap(self,j):
        parent = self._parent(j)
        if j > 0 and self._data[j] < self._data[parent]:
            self._swap(j,parent)
            self._upheap(parent)
            
    def _downheap(self,j):
        if self._has_left(j):
            left = self.left(j)
            small = left
            if self._has_right(j):
                right = self.right(j)
                if self._data[right] < self._data[left]:
                    small = right
            if self._data[small] < self._data[j]:
                self._swap(j,small)
                self._downheap(small)
                
#------------public API----------------------
    def __len__(self):
        return len(self._data)
    
    def add(self,key,value):
        self._data.append(_Item(key,value))
        self._upheap(len(self._data)-1)
        
    def min(self):
        item = self._data[0]
        return item._key, item._value
    
    def remove_min(self):
        self._swap(0,len(self._data) - 1)
        item = self._data.pop()
        self._downheap(0)
        return item._key, item._value

    def __repr__(self):
        return str([(i._key,i._value) for i in self._data])
    
H = HeapPriorityQueue()    
for i,j in zip(key,value):
    H.add(i,j)
print H
