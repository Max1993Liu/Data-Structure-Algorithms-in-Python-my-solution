#implementing a queue with circular linked list
class _Node:
    __slots__ = '_element','_next'
    def __init__(self,element,after):
        self._element = element
        self._next = after
        
class CircularQueue:
    def __init__(self):
        self._size = 0
        self._tail = None
        
    def __len__(self):
        return self._size
    
    def is_empty(self):
        return self._size == 0
    
    def first(self):
        return self._tail._next._element
    
    def dequeue(self):
        answer = self._tail._next._element
        head = self._tail._next
        head = head._next
        self._tail._next = head
        self._size -= 1
        return answer
    
    def enqueue(self,e):
        new = _Node(e,None)
        if self.is_empty():
            #start a initial circulation
            new._next = new
            self._tail = new
        else:
            new._next = self._tail._next
            self._tail._next = new
            self._tail = new
        self._size += 1
            
    def rotate(self):
        self._tail = self.tail._next
        
    def __repr__(self):
        temp = self._tail
        stackList = []
        for i in range(self._size):
            stackList.append(temp._element)
            temp = temp._next
        return str(stackList)
        
CQ = CircularQueue()
CQ.enqueue(2)
CQ.enqueue(3)
CQ.enqueue(4)
CQ.enqueue(5)
CQ.enqueue(6)
CQ.dequeue()
CQ.dequeue()
