#Implementing a stack with a singly linked list
class _Node:
    __slots__ = '_element','_next'
    def __init__(self,element,after):
        self._element = element
        self._next = after
    
class LinkedStack:
    def __init__(self):
        self._head = None
        self._size = 0
    
    def __len__(self):
        return self._size
    
    def is_empty(self):
        return self._size == 0 
    
    def push(self,e):
        self._head = _Node(e,self._head)
        self._size += 1
    
    def top(self):
        if self.is_empty():
            return 'The stack is empty!'
        return self._head._element
    
    def pop(self):
        if self.is_empty():
            return 'The stack is empty!'
        answer = self._head._element
        self._head = self._head._next
        self._size -= 1
        return answer
    
    def __repr__(self):
        temp = self._head
        stackList = []
        for i in range(self._size):
            stackList.append(temp._element)
            temp = temp._next
        return str(stackList)

S = LinkedStack()
S.push(2)
S.push(3)
print S
