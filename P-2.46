import random
import time

class River():
    __slots__ = '_position', '_bear_position', '_fish_position'
    def __init__(self,fishPosition, bearPosition):
        self._position = [None] * 20
        for i in fishPosition:
            self._position[i] = 'Fish'
        for j in bearPosition:
            self._position[j] = 'Bear'
        self._bear_position = bearPosition
        self._fish_position = fishPosition
    
    def get_empty_slot(self):
        return [i for i,x in enumerate(self._position) if x == None]

    def baby_birth(self, animalType):
        self._position[random.choice(self.get_empty_slot())] = animalType
        print ('a new %s is born!'%animalType)
        
    def step_move(self):
        self._bear_position = [i for i,x in enumerate(self._position) if x != None]
        for i in self._bear_position:
            if i == 0:
                targetPosition = i + 1
            elif i == 20:
                targetPosition = i - 1
            else:
                if random.random() >= 0.5:
                    targetPosition = i + 1
                else:
                    targetPosition = i - 1
            #if the cell has same animal, give birth
            if self._position[targetPosition] == self._position[i]:
                self.baby_birth(self._position[i])
            #if the cell holds fish and bear, fish got eaten
            if self._position[i] == 'fish' and self._position[targetPosition] == 'Bear':
                self._position[i] = None
                print 'Fish got eaten :('
                continue
            self._position[targetPosition], self._position[i] = self._position[i], None

    def river_run(self):
        while True:
            self.step_move()
            print self._position
            time.sleep(1)
            if len(self.get_empty_slot()) == 0:
                print 'River is full'
            
                
            
    
test = River([2,5,6,3,4],[10,12,15,18])
test.river_run()
