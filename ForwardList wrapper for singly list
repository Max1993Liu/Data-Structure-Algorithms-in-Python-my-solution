#Implementing a stack with a singly linked list
class _Node:
    __slots__ = '_element','_next'
    def __init__(self,element,after):
        self._element = element
        self._next = after

class Position:
    __slots__ = '_container','_node'
    def __init__(self,container,node):
        self._container = container
        self._node = node
    
    def element(self):
        return self._node._element
    
    def __eq__(self,other):
        if type(self) == type(other) and self._node is other._node:
            return True
        else:
            return false
    
    def __ne__(self,other):
        return not(self == other)
    
    
class LinkedStack(object):
    def __init__(self):
        self._head = None
        self._size = 0
    
    def __len__(self):
        return self._size
    
    def is_empty(self):
        return self._size == 0 
    
    def push(self,e):
        self._head = _Node(e,self._head)
        self._size += 1
    
    def top(self):
        if self.is_empty():
            return 'The stack is empty!'
        return self._head._element
    
    def pop(self):
        if self.is_empty():
            return 'The stack is empty!'
        answer = self._head._element
        self._head = self._head._next
        self._size -= 1
        return answer
    
    def __repr__(self):
        temp = self._head
        stackList = []
        for i in range(self._size):
            stackList.append(temp._element)
            temp = temp._next
        return str(stackList)

class ForwardStack(LinkedStack):
    def __init__(self):
        super(ForwardStack,self).__init__()
    
    #private methods
    def _make_position(self,node):
        if node != None:
            return Position(self,node)
        
    #private method
    def _validate_position(self,p):
        if not isinstance(p,Position):
            raise TypeError('It\'s not a position')
        if p._container != self:
            raise ValueError('Not belong to this list!')
        if p._node == None:
            raise ValueError('Empty node')
        return  p._node
    
    def top(self):
        if self.is_empty():
            return 'The stack is empty!'
        return self._make_position(self._head._element)
    
    def push(self,e):
        self._head = _Node(e,self._head)
        self._size += 1
        return self._make_position(self._head)
    
    def pop(self):
        if self.is_empty():
            return 'The stack is empty!'
        answer = self._make_position(self._head)
        self._head = self._head._next
        self._size -= 1
        return answer
    
    def  __iter__(self):
        walker = self._head
        while walker is not None:
            yield walker._element
            walker = walker._next
            
F = ForwardStack()
for i in range(10):
    F.push(i)
for i in range(5):
    F.pop()
for i in F:
    print i
