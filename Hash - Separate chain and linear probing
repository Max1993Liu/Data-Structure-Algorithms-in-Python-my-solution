from collections import MutableMapping
import random

class MapBase(MutableMapping):
    class _Item(object):
        __slots__ = '_key', '_value'
        
        def __init__(self, key, value):
                self._key = key
                self._value = value
        
        def __eq__(self, other):
            return self._key == other._key
        
        def __ne__(self,other):
            return not self == other
        
        #compare value based on their keys
        def __lt__(self,other):
            return self._key < other._key

class UnsortedTableMap(MapBase):
    
    def __init__(self):
        self._table = []
    
    def __getitem__(self, k):
        for item in self._table:
            if item._key == k:
                return item._value
        #if found then return is used and won't invoke error
        raise KeyError('Key Error')
    
    def __setitem__(self, k, v):
        for item in self._table:
            if item._key == k:
                item._value = v
                return 
        self._table.append(self._Item(k,v))
        
    def __delitem__(self, k):
        for j in range(len(self._table)):
            if k == self._table[j]._key:
                self._table.pop(j)
                return 
        raise KeyError('Key Error')
        
    def __len__(self):
        return len(self._table)
    
    def __iter__(self):
        #iterating over the keys
        for item in self._table:
            yield item._key

            
class HashMapBase(MapBase):
    
    def __init__(self, cap = 11, p = 109345121):
        self._table = [None] * cap
        self._n = 0
        self._prime = p
        self._scale = 1 + random.randrange(p - 1)
        self._shift = random.randrange(p)
        
    def _hash_function(self,k):
        #MAD
        #index will always be within the list
        return (hash(k) * self._scale + self._shift) % self._prime % len(self._table) 
        
    def __len__(self):
        return self._n
    
    def __getitem__(self, k):
        j = self._hash_function(k)
        return self._bucket_getitem(j,k)
    
    def __setitem__(self, k, v):
        j = self._hash_function(k)
        self._bucket_setitem(j, k, v)
        if self._n > len(self._table) // 2:
            self._resize(2 * len(self._table) - 1)
    
    def __delitem__(self, k):
        j = self._hash_function(k)
        self._bucket_delitem(j, k)
        self._n -= 1
        
    def _resize(self, c):
        old = list(self.items())
        self._table = c * [None]
        self._n = 0
        #using the defined __setitem__
        for (k, v) in old:
            self[k] = v
            
#Seperate Chaining
class ChainHashMap(HashMapBase):
    
    def _bucket_setitem(self, j, k, v):
        if self._table[j] is None:
            self._table[j] = UnsortedTableMap()
        old_size = len(self._table[j])
        self._table[j][k] = v
        if len(self._table[j]) > old_size:
            self._n += 1
    
    def _bucket_getitem(self, j, k):
        bucket = self._table[j]
        if bucket is None:
            raise KeyError('Key Error')
        return self._table[k]
    
    def _bucket_delitem(self, j, k):
        bucket = self._table[j]
        if bucket is None:
            raise KeyError('Key Error')
        del bucket[k]
        
    def __iter__(self):
        for bucket in self._table:
            if bucket is not None:
                for key in bucket:
                    yield key

    def __repr__(self):
        return str(self._table)
    

#Linear Probing
class ProbeHashMap(HashMapBase):
    _AVAIL = object()
    
    def _is_available(self, j):
        return self._table[j] is None or self._table[j] is ProbeHashMap._AVAIL
    
    def _find_slot(self, j, k):
        firstAvail = None
        while True:
            if self._is_available(j):
                if firstAvail == None:
                    firstAvail = j
                if self._table[j] is None:
                    return (False, firstAvail)
            elif k == self._table[j]._key:
                return (True, j)
            j = (j + 1) % len(self._table)
    
    def _bucket_getitem(self, j, k):
        find, position = self._find_slot(j,k)
        if not find:
            raise KeyError('Key Error')
        return self._table[position]._value
    
    def _bucket_setitem(self, j, k, v):
        find, position = self._find_slot(j,k)
        if not find:
            self._n += 1
            self._table[position] = self._Item(k,v)
        else:
            self._table[positon]._value = v
            
    def _bucket_delitem(self, j, k):
        find, position = self._find_slot(j, k)
        if not find:
            raise KeyError('Key Error')
        else:
            self._table[position] = ProbeHashMap._AVAIL
    
    def __iter__(self):
        for j in range(len(self._table)):
            if not self._is_available(j):
                yield self._table[j]._key

    def __repr__(self):
        output = []
        for j in range(len(self._table)):
            if not self._is_available(j):    
                output.append(self._table[j]._value)
            else:
                output.append(self._table[j])
        return str(output)
    
P = ProbeHashMap()
for i in range(5):
    P[i] = i + 1
del P[2]
print P
